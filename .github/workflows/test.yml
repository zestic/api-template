name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Call the shared build-docker workflow
  build:
    name: Build Docker Image
    uses: ./.github/workflows/build-docker.yml

  # Run tests using the built Docker image
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: zestic_api_test
          POSTGRES_USER: zestic
          POSTGRES_PASSWORD: password1
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Set up environment variables for all Docker commands
      - name: Set up environment variables
        id: env
        run: |
          echo "DB_ENV=-e DB_HOST=localhost -e DB_PORT=5432 -e DB_NAME=zestic_api_test -e DB_USER=zestic -e DB_PASSWORD=password1 -e DB_SCHEMA=public" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${{ needs.build.outputs.image-name }}" >> $GITHUB_OUTPUT

      # Check if dependencies are cached
      - name: Check Composer cache
        id: composer-cache
        run: |
          if [ -d "./vendor" ] && [ "$(ls -A ./vendor)" ]; then
            echo "cache-hit=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Composer dependencies found in cache"
          else
            echo "cache-hit=false" >> $GITHUB_OUTPUT
            echo "‚ùå Composer dependencies not found in cache"
          fi

      # Install dependencies if not cached
      - name: Install Dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: |
          echo "üì¶ Installing Composer dependencies..."
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/app \
            ${{ steps.env.outputs.DB_ENV }} \
            ${{ steps.env.outputs.IMAGE_NAME }} \
            sh -c "git config --global --add safe.directory /app && composer install --no-interaction --prefer-dist"

      - name: Run Database Migrations
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/app \
            ${{ steps.env.outputs.DB_ENV }} \
            ${{ steps.env.outputs.IMAGE_NAME }} \
            sh -c "git config --global --add safe.directory /app && ./vendor/bin/phinx migrate -e testing"

      - name: Run Tests
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/app \
            ${{ steps.env.outputs.DB_ENV }} \
            ${{ steps.env.outputs.IMAGE_NAME }} \
            sh -c "git config --global --add safe.directory /app && ./vendor/bin/phpunit --colors=always --testsuite=all"

      - name: Upload Coverage Report
        if: success()
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/app \
            ${{ steps.env.outputs.DB_ENV }} \
            ${{ steps.env.outputs.IMAGE_NAME }} \
            sh -c "git config --global --add safe.directory /app && ./vendor/bin/phpunit --coverage-clover clover.xml"