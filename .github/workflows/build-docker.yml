name: Build Docker Image

on:
  workflow_call:
    outputs:
      image-name:
        description: "The name of the built Docker image"
        value: ${{ jobs.build.outputs.image-name }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image-name.outputs.value }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Generate a unique image name
      - name: Set image name
        id: image-name
        run: echo "value=api-template:${{ github.run_id }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      # Setup Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Cache Composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ./vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Build and cache Docker image using CI-optimized Dockerfile
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/frankenphp/Dockerfile.ci
          tags: ${{ steps.image-name.outputs.value }}
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Move cache to prevent growing cache size
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
